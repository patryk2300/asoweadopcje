{"version":3,"file":"ngx-auth-firebaseui.umd.min.js","sources":["../../tmp/module/services/firestore-sync.service.ts","../../tmp/module/enums/accounts.enum.ts","../../tmp/module/services/auth-process.service.ts","../../tmp/module/components/legality-dialog/legality-dialog.component.ts","../../tmp/module/components/auth/auth.component.ts","../../tmp/module/components/user/user.component.ts","../../tmp/module/components/providers/auth.providers.component.ts","../../tmp/module/components/email-confirmation/email-confirmation.component.ts","../../tmp/module/interfaces/config.interface.ts","../../tmp/module/ngx-auth-firebase-u-i.module.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument} from '@angular/fire/firestore';\nimport {QueryFn} from '@angular/fire/firestore/interfaces';\nimport {UserInfo} from 'firebase';\n\nexport const collections = {\n  users: 'users',\n};\n\n@Injectable()\nexport class FirestoreSyncService {\n\n  constructor(public afs: AngularFirestore) {\n    // this.afs.firestore.settings({timestampsInSnapshots: true});\n  }\n\n  // get timestamp() {\n  //     return firebase.firestore.FieldValue.serverTimestamp();\n  // }\n\n  public getUserDocRefByUID(uid: string): AngularFirestoreDocument<UserInfo> {\n    return this.afs.doc(`${collections.users}/${uid}`);\n  }\n\n\n  public getUsersCollectionRef(queryFn?: QueryFn): AngularFirestoreCollection<UserInfo> {\n    return this.afs.collection(`${collections.users}/`, queryFn);\n  }\n\n  public deleteUserData(uid: string): Promise<any> {\n    const userRef: AngularFirestoreDocument<UserInfo> = this.getUserDocRefByUID(uid);\n    return userRef.delete();\n  }\n\n\n  public updateUserData(user: UserInfo): Promise<any> {\n    // Sets user$ data to firestore on login\n    const userRef: AngularFirestoreDocument<UserInfo> = this.getUserDocRefByUID(user.uid);\n    const data: UserInfo = {\n      uid: user.uid,\n      email: user.email,\n      displayName: user.displayName,\n      photoURL: user.photoURL,\n      phoneNumber: user.phoneNumber,\n      providerId: user.providerId\n    };\n    return userRef.set(data, {merge: true});\n  }\n}\n","export enum Accounts {\n  NONE = 'account',\n  CHECK = 'account-check',\n  EDIT = 'account-edit',\n  OFF = 'account-off',\n  REMOVE = 'account-remove',\n}\n","import {EventEmitter, Inject, Injectable} from '@angular/core';\nimport {MatSnackBar} from '@angular/material';\nimport {AngularFireAuth} from '@angular/fire/auth';\nimport {ISignInProcess, ISignUpProcess} from '../interfaces/main.interface';\nimport {NgxAuthFirebaseUIConfig} from '../interfaces/config.interface';\nimport {FirestoreSyncService} from './firestore-sync.service';\nimport {Accounts} from '../enums';\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport {User, UserInfo} from 'firebase/app';\nimport {NgxAuthFirebaseUIConfigToken} from '../ngx-auth-firebase-u-i.module';\n// import User = firebase.User;\n\nimport UserCredential = firebase.auth.UserCredential;\n\nexport const facebookAuthProvider = new firebase.auth.FacebookAuthProvider();\nexport const googleAuthProvider = new firebase.auth.GoogleAuthProvider();\nexport const twitterAuthProvider = new firebase.auth.TwitterAuthProvider();\nexport const githubAuthProvider = new firebase.auth.GithubAuthProvider();\n\nexport enum AuthProvider {\n  ALL = 'all',\n  ANONYMOUS = 'anonymous',\n  EmailAndPassword = 'firebase',\n  Google = 'google',\n  Facebook = 'facebook',\n  Twitter = 'twitter',\n  Github = 'github',\n  PhoneNumber = 'phoneNumber'\n}\n\n@Injectable()\nexport class AuthProcessService implements ISignInProcess, ISignUpProcess {\n\n  onSuccessEmitter: EventEmitter<any> = new EventEmitter<any>();\n  onErrorEmitter: EventEmitter<any> = new EventEmitter<any>();\n\n  isLoading: boolean;\n  emailConfirmationSent: boolean;\n\n  emailToConfirm: string;\n  messageOnAuthSuccess: string;\n  messageOnAuthError: string;\n\n  constructor(@Inject(NgxAuthFirebaseUIConfigToken)\n              public config: NgxAuthFirebaseUIConfig,\n              public afa: AngularFireAuth,\n              private _snackBar: MatSnackBar,\n              private _fireStoreService: FirestoreSyncService) {\n  }\n\n  /**\n   * Reset the password of the user via email\n   *\n   * @param email - the email to reset\n   * @returns\n   */\n  public resetPassword(email: string) {\n    return this.afa.auth.sendPasswordResetEmail(email)\n      .then(() => console.log('email sent'))\n      .catch((error) => this.onErrorEmitter.next(error));\n  }\n\n  /**\n   * General sign in mechanism to authenticate the users with a firebase project\n   * using a traditional way, via username and password or by using an authentication provider\n   * like google, facebook, twitter and github\n   *\n   * @param provider - the provider to authenticate with (google, facebook, twitter, github)\n   * @param email - (optional) the email of user - used only for a traditional sign in\n   * @param password - (optional) the password of user - used only for a traditional sign in\n   * @returns\n   */\n  public async signInWith(provider: AuthProvider, email?: string, password?: string) {\n    try {\n      this.isLoading = true;\n      let signInResult: UserCredential;\n\n      switch (provider) {\n        case AuthProvider.ANONYMOUS:\n          signInResult = await this.afa.auth.signInAnonymously() as UserCredential;\n          break;\n\n        case AuthProvider.EmailAndPassword:\n          signInResult = await this.afa.auth.signInWithEmailAndPassword(email, password) as UserCredential;\n          break;\n\n        case AuthProvider.Google:\n          signInResult = await this.afa.auth.signInWithPopup(googleAuthProvider) as UserCredential;\n          break;\n\n        case AuthProvider.Facebook:\n          signInResult = await this.afa.auth.signInWithPopup(facebookAuthProvider) as UserCredential;\n          break;\n\n        case AuthProvider.Twitter:\n          signInResult = await this.afa.auth.signInWithPopup(twitterAuthProvider) as UserCredential;\n          break;\n\n        case AuthProvider.Github:\n          signInResult = await this.afa.auth.signInWithPopup(githubAuthProvider) as UserCredential;\n          break;\n\n        default:\n          throw new Error(`${AuthProvider[provider]} is not available as auth provider`);\n\n      }\n      await this.handleSuccess(signInResult);\n    } catch (err) {\n      this.handleError(err);\n      console.error(err);\n      // this._snackBar.open(err.message, 'OK', {duration: 5000});\n      this.onErrorEmitter.next(err);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  /**\n   * Sign up new users via email and password.\n   * After that the user should verify and confirm an email sent via the firebase\n   *\n   * @param name - the name if the new user\n   * @param email - the email if the new user\n   * @param password - the password if the new user\n   * @returns\n   */\n  public async signUp(name: string, email: string, password: string) {\n    try {\n      this.isLoading = true;\n      const userCredential: UserCredential = await this.afa.auth.createUserWithEmailAndPassword(email, password);\n      const user = userCredential.user;\n\n      if (this.config.enableFirestoreSync) {\n        await this._fireStoreService\n          .getUserDocRefByUID(user.uid)\n          .set({\n            uid: user.uid,\n            displayName: name,\n            email: user.email,\n            photoURL: user.photoURL\n          } as User);\n\n        await this.updateProfile(name, user.photoURL);\n      }\n\n      await user.sendEmailVerification();\n      this.emailConfirmationSent = true;\n      this.emailToConfirm = email;\n\n      await this.handleSuccess(userCredential);\n    } catch (err) {\n      this.handleError(err);\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  /**\n   * Update the profile (name + photo url) of the authenticated user in the\n   * firebase authentication feature (not in firestore)\n   *\n   * @param name - the new name of the authenticated user\n   * @param photoURL - the new photo url of the authenticated user\n   * @returns\n   */\n  public async updateProfile(name: string, photoURL: string): Promise<any> {\n    return await this.afa.auth.currentUser.updateProfile({displayName: name, photoURL: photoURL});\n  }\n\n  public async deleteAccount(): Promise<any> {\n    return await this.afa.auth.currentUser.delete();\n  }\n\n  public parseUserInfo(user: User): UserInfo {\n    return {\n      uid: user.uid,\n      displayName: user.displayName,\n      email: user.email,\n      phoneNumber: user.phoneNumber,\n      photoURL: user.photoURL,\n      providerId: user.providerData.length > 0 ? user.providerData[0].providerId : null\n    };\n  }\n\n  public getUserPhotoUrl(): string {\n\n    const user: firebase.User | null = this.afa.auth.currentUser;\n\n    if (!user) {\n      return;\n    } else if (user.photoURL) {\n      return user.photoURL;\n    } else if (user.emailVerified) {\n      return this.getPhotoPath(Accounts.CHECK);\n    } else if (user.isAnonymous) {\n      return this.getPhotoPath(Accounts.OFF);\n    } else {\n      return this.getPhotoPath(Accounts.NONE);\n    }\n  }\n\n  public getPhotoPath(image: string) {\n    return `assets/user/${image}.svg`;\n  }\n\n  public signInWithPhoneNumber() {\n    // todo: 3.1.18\n  }\n\n  async handleSuccess(userCredential: UserCredential) {\n    if (this.config.enableFirestoreSync) {\n      await this._fireStoreService.updateUserData(this.parseUserInfo(userCredential.user));\n    }\n\n    if (this.config.toastMessageOnAuthSuccess) {\n      this._snackBar.open(this.messageOnAuthSuccess ? this.messageOnAuthSuccess :\n        `Hallo ${userCredential.user.displayName ? userCredential.user.displayName : ''}!`,\n        'OK', {duration: 5000});\n    }\n    this.onSuccessEmitter.next(userCredential.user);\n  }\n\n  handleError(error: any) {\n    if (this.config.toastMessageOnAuthError) {\n      this._snackBar.open(this.messageOnAuthError ? this.messageOnAuthError :\n        error.message, 'OK', {duration: 5000});\n    }\n    console.error(error);\n    this.onErrorEmitter.next(error);\n  }\n\n}\n","import {Component, Inject} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material';\nimport {LegalityDialogParams, LegalityDialogResult} from '../../interfaces/legality.dialog.intreface';\n\n@Component({\n  selector: 'ngx-auth-firebaseui-legality-dialog',\n  template: `\n    <h1 matDialogTitle>Legal requirements</h1>\n\n    <mat-dialog-content>\n      <div fxLayout=\"column\" fxLayoutAlign=\"start\">\n        <mat-checkbox *ngIf=\"this.data.tosUrl\" [(ngModel)]=\"checkTOS\">\n          I agree to the\n          <span>&nbsp;</span>\n          <a target=\"_blank\"\n             [href]=\"this.data.tosUrl\">\n            Terms of Service and Conditions\n          </a>\n        </mat-checkbox>\n\n        <mat-checkbox *ngIf=\"this.data.privacyPolicyUrl\"\n                      [(ngModel)]=\"checkPrivacyPolicy\">\n          I have read and agree to the\n          <span>&nbsp;</span>\n          <a target=\"_blank\"\n             [href]=\"this.data.privacyPolicyUrl\">\n            Privacy\n          </a>\n        </mat-checkbox>\n      </div>\n    </mat-dialog-content>\n\n    <mat-dialog-actions>\n      <button id=\"decline-action\"\n              mat-raised-button\n              matDialogClose\n              color=\"warn\">Decline</button>\n      <button id=\"confirm-action\"\n              mat-raised-button\n              color=\"primary\"\n              [disabled]=\"disableConfirmActionButton\"\n              (click)=\"closeDialog()\">Confirm\n      </button>\n    </mat-dialog-actions>\n  `,\n  styles: [`\n    ::ng-deep .mat-checkbox-label{display:flex;flex-wrap:wrap}mat-dialog-content div{margin-top:1.5rem}mat-dialog-actions{margin-top:1rem}\n  `]\n})\nexport class LegalityDialogComponent {\n\n  checkTOS: boolean;\n  checkPrivacyPolicy: boolean;\n  private _disableConfirmActionButton = false;\n\n  constructor(public dialogRef: MatDialogRef<LegalityDialogComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: LegalityDialogParams) {\n  }\n\n\n  get disableConfirmActionButton(): boolean {\n    if (this.data.tosUrl && this.data.privacyPolicyUrl) {\n      this._disableConfirmActionButton = !(this.checkTOS && this.checkPrivacyPolicy);\n    } else if (this.data.tosUrl && !this.data.privacyPolicyUrl) {\n      this._disableConfirmActionButton = !this.checkTOS\n    } else if (!this.data.tosUrl && this.data.privacyPolicyUrl) {\n      this._disableConfirmActionButton = !this.checkPrivacyPolicy\n    }\n    return this._disableConfirmActionButton;\n  }\n\n  closeDialog() {\n    const result: LegalityDialogResult = {\n      checked: !this.disableConfirmActionButton,\n      authProvider: this.data.authProvider\n    };\n    this.dialogRef.close(result);\n  }\n\n}\n","import {Component, Inject, Input, OnChanges, OnDestroy, OnInit, Output, PLATFORM_ID, SimpleChanges} from '@angular/core';\nimport {AbstractControl, FormControl, FormGroup, Validators} from '@angular/forms';\nimport {MatDialog, MatDialogRef, MatFormFieldAppearance} from '@angular/material';\nimport {AngularFireAuth} from '@angular/fire/auth';\nimport {isPlatformBrowser} from '@angular/common';\nimport {Subscription} from 'rxjs/internal/Subscription';\n\nimport {AuthProcessService, AuthProvider} from '../../services/auth-process.service';\nimport {LegalityDialogComponent} from '../../components/legality-dialog/legality-dialog.component';\nimport {LegalityDialogParams, LegalityDialogResult} from '../../interfaces/legality.dialog.intreface';\n\n\nexport const EMAIL_REGEX = new RegExp(['^(([^<>()[\\\\]\\\\\\.,;:\\\\s@\\\"]+(\\\\.[^<>()\\\\[\\\\]\\\\\\.,;:\\\\s@\\\"]+)*)',\n  '|(\".+\"))@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.',\n  '[0-9]{1,3}\\])|(([a-zA-Z\\\\-0-9]+\\\\.)+',\n  '[a-zA-Z]{2,}))$'].join(''));\n\nexport const PHONE_NUMBER_REGEX = new RegExp(/^\\+(?:[0-9] ?){6,14}[0-9]$/);\n\n@Component({\n  selector: 'ngx-auth-firebaseui',\n  template: `\n    <mat-tab-group [color]=\"color\" [selectedIndex]=\"tabIndex\">\n      <!--Reset password tab-->\n      <mat-tab *ngIf=\"passwordResetWished\" label=\"Reset Password\">\n        <form [formGroup]=\"resetPasswordFormGroup\" (ngSubmit)=\"resetPasswordFormGroup.valid && resetPassword()\">\n\n          <mat-card>\n            <mat-card-header fxLayoutAlign=\"end\">\n              <button mat-icon-button\n                      [color]=\"color\"\n                      matTooltip=\"close\"\n                      matTooltipPosition=\"above\"\n                      (click)=\"passwordResetWished = false\">\n                <mat-icon>close</mat-icon>\n              </button>\n            </mat-card-header>\n\n            <mat-card-content>\n              <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n                <mat-label>Reset e-mail address to password</mat-label>\n                <input matInput\n                       [readonly]=\"passReset\"\n                       formControlName=\"email\"\n                       title=\"Reset e-mail address to password\"\n                       required>\n                <mat-icon matSuffix [color]=\"color\">email</mat-icon>\n                <mat-error *ngIf=\"resetPasswordEmailFormControl.hasError('required')\">\n                  E-mail is required to reset the password!\n                </mat-error>\n                <mat-error *ngIf=\"resetPasswordEmailFormControl.hasError('pattern')\">\n                  Please enter a valid e-mail address\n                </mat-error>\n              </mat-form-field>\n            </mat-card-content>\n            <mat-card-actions fxLayoutAlign=\"center\">\n              <button mat-raised-button\n                      type=\"submit\"\n                      [color]=\"color\"\n                      [disabled]=\"passReset\">\n                Reset\n              </button>\n            </mat-card-actions>\n            <mat-card-footer *ngIf=\"passReset\" fxLayoutAlign=\"center\">\n              <p>Reset requested. Check your e-mail instructions.</p>\n            </mat-card-footer>\n            <mat-card-footer>\n              <mat-progress-bar *ngIf=\"authProcess.isLoading\" mode=\"indeterminate\"></mat-progress-bar>\n            </mat-card-footer>\n          </mat-card>\n        </form>\n      </mat-tab>\n\n      <!--Sign in tab-->\n      <mat-tab label=\"Sign in\">\n        <mat-card>\n          <mat-card-title>Signing in</mat-card-title>\n          <mat-card-content>\n            <form [formGroup]=\"signInFormGroup\"\n                  (ngSubmit)=\"signInFormGroup.valid &&\n                  authProcess.signInWith\n                  (authProviders.EmailAndPassword,signInFormGroup.value.email,signInFormGroup.value.password)\">\n              <div fxLayout=\"column\" fxLayoutAlign=\"center\">\n                <mat-form-field [appearance]=\"appearance\">\n                  <mat-label>E-mail</mat-label>\n                  <input matInput\n                         placeholder=\"E-mail\"\n                         formControlName=\"email\"\n                         required>\n                  <mat-icon matSuffix [color]=\"color\">email</mat-icon>\n                  <mat-error *ngIf=\"signInEmailFormControl.hasError('required')\">\n                    E-mail is required\n                  </mat-error>\n                  <mat-error *ngIf=\"signInEmailFormControl.hasError('pattern')\">\n                    Please enter a valid e-mail address\n                  </mat-error>\n                </mat-form-field>\n\n                <mat-form-field [appearance]=\"appearance\">\n                  <mat-label>Password</mat-label>\n                  <input matInput\n                         type=\"password\"\n                         placeholder=\"Password\"\n                         minlength=\"6\"\n                         maxlength=\"25\"\n                         formControlName=\"password\"\n                         required>\n                  <mat-icon matSuffix [color]=\"color\">lock</mat-icon>\n                  <mat-hint align=\"end\" aria-live=\"polite\">\n                    {{signInFormGroup.value.password.length}} / 25\n                  </mat-hint>\n                  <mat-error *ngIf=\"sigInPasswordFormControl.hasError('required')\">\n                    Please do not forget the password\n                  </mat-error>\n                  <mat-error *ngIf=\"sigInPasswordFormControl.hasError('minlength')\">\n                    The password must be at least 6 characters long.\n                  </mat-error>\n                  <mat-error *ngIf=\"sigInPasswordFormControl.hasError('maxlength')\">\n                    The password must not exceed 25 characters\n                  </mat-error>\n                </mat-form-field>\n\n                <button mat-raised-button\n                        style=\"margin-top: 20px\"\n                        type=\"submit\"\n                        class=\"space-top\"\n                        [color]=\"color\">\n                  Log In\n                </button>\n\n              </div>\n            </form>\n\n            <div fxLayoutAlign=\"center\">\n              <button mat-button\n                      class=\"space-top\"\n                      [color]=\"color\"\n                      (click)=\"createForgotPasswordTab()\">\n                Forgot Password?\n              </button>\n            </div>\n\n          </mat-card-content>\n          <mat-card-footer *ngIf=\"authProcess.isLoading\">\n            <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n          </mat-card-footer>\n        </mat-card>\n      </mat-tab>\n\n      <!--tab register-->\n      <mat-tab label=\"Register\">\n        <mat-card>\n          <mat-card-title>Registration</mat-card-title>\n          <div *ngIf=\"!authProcess.emailConfirmationSent;then register else confirm\"></div>\n          <ng-template #register>\n            <mat-card-content fxLayout=\"column\" fxLayoutAlign=\"center\">\n              <form [formGroup]=\"signUpFormGroup\" (ngSubmit)=\"signUpFormGroup.valid &&\n              authProcess.signUp\n              (signUpFormGroup.value.name,signUpFormGroup.value.email,signUpFormGroup.value.password)\">\n                <div fxLayout=\"column\" fxLayoutAlign=\"center\">\n                  <!--name-->\n                  <mat-form-field [appearance]=\"appearance\">\n                    <!--labels will work only with @angular/material@6.2.0 -->\n                    <mat-label>Name</mat-label>\n                    <input matInput\n                           placeholder=\"Name\"\n                           minlength=\"2\"\n                           maxlength=\"30\"\n                           [formControl]=\"sigUpNameFormControl\"\n                           required>\n                    <mat-icon matSuffix [color]=\"color\">person</mat-icon>\n                    <mat-hint align=\"end\" aria-live=\"polite\">\n                      {{signUpFormGroup.value.name?.length}} / 25\n                    </mat-hint>\n                    <mat-error *ngIf=\"sigUpNameFormControl.hasError('required')\">\n                      Name is required\n                    </mat-error>\n                    <mat-error *ngIf=\"sigUpPasswordFormControl.hasError('minlength')\">\n                      The name is too short!\n                    </mat-error>\n                    <mat-error *ngIf=\"sigUpPasswordFormControl.hasError('maxlength')\">\n                      The name is too long!\n                    </mat-error>\n                  </mat-form-field>\n\n                  <!--email-->\n                  <mat-form-field [appearance]=\"appearance\">\n                    <mat-label>E-mail</mat-label>\n                    <input matInput\n                           placeholder=\"E-mail\"\n                           type=\"email\"\n                           [formControl]=\"sigUpEmailFormControl\">\n                    <mat-icon matSuffix [color]=\"color\">email</mat-icon>\n                    <mat-error *ngIf=\"sigUpEmailFormControl.hasError('required')\">\n                      E-mail is required\n                    </mat-error>\n                    <mat-error *ngIf=\"sigUpEmailFormControl.hasError('pattern')\">\n                      Please enter a valid e-mail address\n                    </mat-error>\n                  </mat-form-field>\n\n                  <!--password-->\n                  <div fxLayout=\"column\">\n\n                    <mat-form-field [appearance]=\"appearance\">\n                      <mat-label>Password</mat-label>\n                      <input matInput\n                             type=\"password\"\n                             placeholder=\"password\"\n                             name=\"password\"\n                             [formControl]=\"sigUpPasswordFormControl\"\n                             required>\n                      <mat-icon matSuffix [color]=\"color\">lock</mat-icon>\n\n                      <mat-hint align=\"end\" aria-live=\"polite\">\n                        {{signUpFormGroup.value.password?.length}} / 25\n                      </mat-hint>\n\n                      <mat-error *ngIf=\"sigUpPasswordFormControl.hasError('required')\" class=\"cut-text\">\n                        Please do not forget the password\n                      </mat-error>\n\n                      <mat-error *ngIf=\"sigUpPasswordFormControl.hasError('minlength')\" class=\"cut-text\">\n                        The password must be at least 6 characters long.\n                      </mat-error>\n                      <mat-error *ngIf=\"sigUpPasswordFormControl.hasError('maxlength')\" class=\"cut-text\">\n                        The password can not be longer than 25 characters.\n                      </mat-error>\n\n                    </mat-form-field>\n\n                    <mat-password-strength\n                      [password]=\"signUpFormGroup.value.password\"\n                      [externalError]=\"sigUpPasswordFormControl.dirty\">\n                    </mat-password-strength>\n\n                  </div>\n\n                  <button mat-raised-button\n                          style=\"margin-top: 20px\"\n                          type=\"submit\"\n                          [color]=\"color\">\n                    Register\n                  </button>\n\n                </div>\n              </form>\n\n              <button *ngIf=\"guestEnabled\"\n                      mat-button\n                      style=\"margin-top: 20px\"\n                      [color]=\"color\"\n                      (click)=\"openLegalityDialog(authProvider.ANONYMOUS)\">\n                <mat-icon>fingerprint</mat-icon>\n                continue as guest\n              </button>\n\n            </mat-card-content>\n\n            <mat-card-footer *ngIf=\"authProcess.isLoading\">\n              <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n            </mat-card-footer>\n\n          </ng-template>\n\n          <!--confirm template-->\n          <ng-template #confirm>\n            <ngx-auth-firebaseui-email-confirmation [email]=\"authProcess.emailToConfirm\"\n                                                    [goBackURL]=\"goBackURL\">\n            </ngx-auth-firebaseui-email-confirmation>\n          </ng-template>\n\n        </mat-card>\n      </mat-tab>\n    </mat-tab-group>\n    <mat-divider></mat-divider>\n    <ngx-auth-firebaseui-providers [providers]=\"providers\"></ngx-auth-firebaseui-providers>\n  `,\n  styles: [`\n    .mat-card{margin:2rem}.space-top{margin-top:.5rem}.full-width{width:100%}.cut-text{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}\n  `]\n})\n\nexport class AuthComponent implements OnInit, OnChanges, OnDestroy {\n\n  @Input()\n  providers: string[] | string = AuthProvider.ALL; //  google, facebook, twitter, github as array or all as one single string\n\n  @Input()\n  appearance: MatFormFieldAppearance;\n\n  @Input()\n  tabIndex: number | null;\n\n  @Input()\n  guestEnabled = true;\n\n  @Input()\n  tosUrl: string;\n\n  @Input()\n  privacyPolicyUrl: string;\n\n  @Input()\n  goBackURL: string;\n\n  @Input()\n  messageOnAuthSuccess: string;\n\n  @Input()\n  messageOnAuthError: string;\n\n  @Output()\n  onSuccess: any;\n\n  @Output()\n  onError: any;\n\n  authProvider = AuthProvider;\n  passwordResetWished: boolean;\n\n  public signInFormGroup: FormGroup;\n  public signUpFormGroup: FormGroup;\n  public resetPasswordFormGroup: FormGroup;\n\n  onErrorSubscription: Subscription;\n  authenticationError = false;\n\n  passReset = false;\n  dialogRef: MatDialogRef<LegalityDialogComponent>;\n\n  authProviders = AuthProvider;\n\n  signInEmailFormControl: AbstractControl;\n  sigInPasswordFormControl: AbstractControl;\n\n  sigUpNameFormControl: AbstractControl;\n  sigUpEmailFormControl: AbstractControl;\n  sigUpPasswordFormControl: AbstractControl;\n  sigUpPasswordConfirmationFormControl: AbstractControl;\n  resetPasswordEmailFormControl: AbstractControl;\n\n  constructor(@Inject(PLATFORM_ID) private platformId: Object,\n              public auth: AngularFireAuth,\n              public authProcess: AuthProcessService,\n              public dialog: MatDialog) {\n\n    this.onSuccess = authProcess.onSuccessEmitter;\n    this.onError = authProcess.onErrorEmitter;\n  }\n\n  public ngOnInit(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      this.onErrorSubscription = this.onError.subscribe(() => this.authenticationError = true);\n    }\n    this.updateAuthSnackbarMessages();\n    // auth form's initialization\n    this._initSignInFormGroupBuilder();\n    this._initSignUpFormGroupBuilder();\n    this._initResetPasswordFormGroupBuilder();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.messageOnAuthSuccess || changes.messageOnAuthError) {\n      this.updateAuthSnackbarMessages();\n    }\n  }\n\n  public ngOnDestroy(): void {\n    if (this.onErrorSubscription) {\n      this.onErrorSubscription.unsubscribe();\n    }\n  }\n\n  get color(): string {\n    return this.authenticationError ? 'warn' : 'primary';\n  }\n\n  public updateAuthSnackbarMessages(): void {\n    this.authProcess.messageOnAuthSuccess = this.messageOnAuthSuccess;\n    this.authProcess.messageOnAuthError = this.messageOnAuthError;\n  }\n\n  public createForgotPasswordTab() {\n    this.passwordResetWished = true;\n    setTimeout(() => this.tabIndex = 0, 100);\n  }\n\n  public openLegalityDialog(authProvider?: AuthProvider) {\n    if (this.tosUrl || this.privacyPolicyUrl) {\n      const params: LegalityDialogParams = {\n        tosUrl: this.tosUrl,\n        privacyPolicyUrl: this.privacyPolicyUrl,\n        authProvider: authProvider\n      };\n\n      this.dialogRef = this.dialog.open(LegalityDialogComponent, {data: params});\n      this.dialogRef.afterClosed().subscribe((result: LegalityDialogResult) => {\n        // console.log('this.dialogRef.afterClosed(): ', result);\n        if (result && result.checked) {\n          this._afterSignUpMiddleware(result.authProvider).then(() => this.signUpFormGroup.reset());\n        }\n        this.dialogRef = null;\n      });\n    } else {\n      this._afterSignUpMiddleware(authProvider).then(() => this.signUpFormGroup.reset());\n    }\n  }\n\n  public async signUp() {\n    return await this.authProcess.signUp\n    (\n      this.signUpFormGroup.value.name,\n      this.signUpFormGroup.value.email,\n      this.signUpFormGroup.value.password\n    );\n  }\n\n  public async signUpAnonymously() {\n    return await this.authProcess.signInWith(this.authProvider.ANONYMOUS);\n  }\n\n\n  public resetPassword() {\n    this.authProcess.resetPassword(this.resetPasswordEmailFormControl.value)\n      .then(() => this.passReset = true);\n  }\n\n  private _initSignInFormGroupBuilder() {\n    this.signInFormGroup = new FormGroup({});\n    this.signInFormGroup.registerControl('email', this.signInEmailFormControl = new FormControl('',\n      [\n        Validators.required,\n        Validators.pattern(EMAIL_REGEX)\n      ]));\n    this.signInFormGroup.registerControl('password', this.sigInPasswordFormControl = new FormControl('',\n      [\n        Validators.required,\n        Validators.minLength(6),\n        Validators.maxLength(25),\n      ]));\n  }\n\n  private _initSignUpFormGroupBuilder() {\n    this.signUpFormGroup = new FormGroup({\n      name: this.sigUpNameFormControl = new FormControl('',\n        [\n          Validators.required,\n          Validators.minLength(2),\n          Validators.maxLength(30),\n        ]),\n      email: this.sigUpEmailFormControl = new FormControl('',\n        [\n          Validators.required,\n          Validators.pattern(EMAIL_REGEX)\n        ]),\n      password: this.sigUpPasswordFormControl = new FormControl('',\n        [\n          Validators.required,\n          Validators.minLength(6),\n          Validators.maxLength(25),\n        ])\n    });\n  }\n\n  private _initResetPasswordFormGroupBuilder() {\n    this.resetPasswordFormGroup = new FormGroup({\n      email: this.resetPasswordEmailFormControl = new FormControl('',\n        [\n          Validators.required,\n          Validators.pattern(EMAIL_REGEX)\n        ])\n    });\n  }\n\n  private _afterSignUpMiddleware(authProvider?: AuthProvider) {\n    if (authProvider === this.authProvider.ANONYMOUS) {\n      return this.signUpAnonymously();\n    }\n    return this.signUp();\n  }\n\n}\n","import {Component, EventEmitter, Inject, Input, OnInit, Output} from '@angular/core';\nimport {AngularFireAuth} from '@angular/fire/auth';\nimport {MatFormFieldAppearance, MatSnackBar} from '@angular/material';\nimport {AuthProcessService} from '../../services/auth-process.service';\nimport {AbstractControl, FormControl, FormGroup, Validators} from '@angular/forms';\nimport {EMAIL_REGEX, PHONE_NUMBER_REGEX} from '../auth/auth.component';\nimport {User} from 'firebase';\nimport {FirestoreSyncService} from '../../services/firestore-sync.service';\nimport {NgxAuthFirebaseUIConfig, NgxAuthFirebaseUIConfigToken} from '../../ngx-auth-firebase-u-i.module';\n\n@Component({\n  selector: 'ngx-auth-firebaseui-user',\n  template: `\n    <div *ngIf=\"auth.authState| async as user; then authenticated else none\">\n\n    </div>\n\n    <ng-template #authenticated>\n      <mat-card *ngIf=\"auth.user | async as user\">\n        <!--<form [formGroup]=\"updateFormGroup\" >-->\n        <!--card header-->\n        <mat-card-header fxLayout=\"column\" fxLayoutAlign=\"center center\">\n\n          <img mat-card-avatar [src]=\"authProcess?.getUserPhotoUrl()\">\n\n          <div *ngIf=\"user.emailVerified; then emailVerified else emailNotVerified\"></div>\n          <ng-template #emailVerified>\n            <mat-icon color=\"primary\"\n                      matTooltip=\"email is verified\"\n                      matTooltipPosition=\"after\">\n              verified_user\n            </mat-icon>\n          </ng-template>\n          <ng-template #emailNotVerified>\n            <mat-icon color=\"warn\"\n                      matTooltip=\"email is not verified\"\n                      matTooltipPosition=\"after\">\n              warning\n            </mat-icon>\n          </ng-template>\n\n        </mat-card-header>\n\n        <!--card content-->\n        <mat-card-content *ngIf=\"editMode; then edit else readonly\">\n        </mat-card-content>\n\n        <ng-template #edit>\n          <form [formGroup]=\"updateFormGroup\" (submit)=\"save()\">\n\n            <mat-card-content fxLayout=\"column\" fxLayoutAlign=\"center center\">\n              <div fxLayoutAlign=\"center\">\n                <button mat-raised-button color=\"warn\" class=\"edit-button\"\n                        (click)=\"changeEditMode()\">\n                  cancel\n                </button>\n              </div>\n\n              <!--name-->\n              <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n                <mat-label>Name</mat-label>\n                <input matInput\n                       placeholder=\"Name\"\n                       [formControl]=\"updateNameFormControl\"\n                       [value]=\"user.displayName\">\n                <mat-icon matSuffix>person</mat-icon>\n                <mat-hint align=\"end\" aria-live=\"polite\">\n                  {{updateNameFormControl.value.length}} / 25\n                </mat-hint>\n                <mat-error *ngIf=\"updateNameFormControl.hasError('required')\">\n                  Name is required\n                </mat-error>\n              </mat-form-field>\n\n              <!--email-->\n              <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n                <mat-label>E-mail</mat-label>\n                <input matInput\n                       placeholder=\"E-mail\"\n                       [formControl]=\"updateEmailFormControl\"\n                       [value]=\"user.email\">\n                <mat-icon matSuffix>email</mat-icon>\n                <mat-error *ngIf=\"updateEmailFormControl.hasError('required')\">\n                  E-mail is required {{updateEmailFormControl.value}}\n                </mat-error>\n                <mat-error *ngIf=\"updateEmailFormControl.hasError('pattern')\">\n                  Please enter a valid e-mail address {{updateEmailFormControl.value}}\n                </mat-error>\n              </mat-form-field>\n\n              <!--phone number-->\n              <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n                <mat-label>Phone number</mat-label>\n                <input matInput\n                       type=\"number\"\n                       placeholder=\"Phone number\"\n                       [formControl]=\"updatePhoneNumberFormControl\"\n                       [value]=\"user.phoneNumber\">\n                <mat-icon matSuffix>phone</mat-icon>\n                <mat-hint align=\"end\" aria-live=\"polite\">\n                  The phone number is international. Therefore, it should start with a + sign or 00,\n                  followed by the country code, - and national number e.g: +49-12345678 or 0041-1234567890\n\n                  NOTE : the phone number must be a valid phone credential !!\n                </mat-hint>\n                <mat-error *ngIf=\"updatePhoneNumberFormControl.hasError('pattern')\">\n                  Please enter a valid phone number\n                </mat-error>\n              </mat-form-field>\n\n            </mat-card-content>\n\n            <mat-card-actions fxLayout=\"column\">\n              <button mat-button\n                      color=\"primary\"\n                      type=\"submit\">\n                Save changes\n              </button>\n            </mat-card-actions>\n          </form>\n        </ng-template>\n\n        <ng-template #readonly>\n          <div fxLayoutAlign=\"center\">\n            <button mat-raised-button color=\"primary\" class=\"edit-button\"\n                    (click)=\"changeEditMode()\">\n              edit\n            </button>\n          </div>\n\n          <!--name-->\n          <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n            <mat-label>Name</mat-label>\n            <input matInput\n                   placeholder=\"Name\"\n                   [value]=\"user.displayName\"\n                   [disabled]=\"!editMode\">\n            <mat-icon matSuffix color=\"primary\">person</mat-icon>\n          </mat-form-field>\n\n          <!--email-->\n          <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n            <mat-label>E-mail</mat-label>\n            <input matInput\n                   placeholder=\"E-mail\" [value]=\"user.email\"\n                   [disabled]=\"!editMode\">\n            <mat-icon matSuffix color=\"primary\">email</mat-icon>\n          </mat-form-field>\n\n          <!--phone number-->\n          <mat-form-field class=\"full-width\" [appearance]=\"appearance\">\n            <mat-label>Phone number</mat-label>\n            <input matInput\n                   placeholder=\"Phone number\"\n                   [value]=\"user.phoneNumber\"\n                   [disabled]=\"!editMode\">\n            <mat-icon matSuffix color=\"primary\">phone</mat-icon>\n          </mat-form-field>\n\n          <mat-card-actions fxLayout=\"column\">\n            <button mat-button color=\"primary\" (click)=\"auth.auth.signOut()\">Sign out</button>\n            <button mat-button color=\"warn\" (click)=\"deleteAccount()\">Delete account</button>\n          </mat-card-actions>\n\n        </ng-template>\n\n      </mat-card>\n\n    </ng-template>\n\n\n    <ng-template #none>\n      <mat-card class=\"none-card\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n        <mat-card-content fxLayout=\"row\" fxLayoutAlign=\"center center\">\n          <mat-icon color=\"accent\">warning</mat-icon>\n          <span>You are not logged in!</span>\n        </mat-card-content>\n      </mat-card>\n    </ng-template>\n  `,\n  styles: [`\n    .edit-button{margin:1rem}.full-width{width:100%}.cut-text{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.none-card{min-height:430px}.none-card span{font-size:24px;text-align:center;color:rgba(0,0,0,.54)}\n  `]\n})\nexport class UserComponent implements OnInit {\n\n  @Input()\n  editMode: boolean;\n\n  @Input()\n  appearance: MatFormFieldAppearance;\n\n  @Output()\n  onAccountDeleted: EventEmitter<void> = new EventEmitter();\n\n  updateFormGroup: FormGroup;\n  updateNameFormControl: AbstractControl;\n  updateEmailFormControl: AbstractControl;\n  updatePhoneNumberFormControl: AbstractControl;\n  updatePasswordFormControl: AbstractControl;\n\n  constructor(@Inject(NgxAuthFirebaseUIConfigToken)\n              public config: NgxAuthFirebaseUIConfig,\n              public auth: AngularFireAuth,\n              public authProcess: AuthProcessService,\n              private _fireStoreService: FirestoreSyncService,\n              private snackBar: MatSnackBar) {\n  }\n\n  ngOnInit() {\n  }\n\n  protected initUpdateFormGroup() {\n    const currentUser: User = this.auth.auth.currentUser;\n    this.updateFormGroup = new FormGroup({\n      name: this.updateNameFormControl = new FormControl(\n        {value: currentUser.displayName, disabled: true},\n        [\n          Validators.required,\n          Validators.minLength(2),\n          Validators.maxLength(25),\n        ]\n      ),\n\n      email: this.updateEmailFormControl = new FormControl(\n        {value: currentUser.email, disabled: true},\n        [\n          Validators.required,\n          Validators.pattern(EMAIL_REGEX)\n        ]),\n\n      phoneNumber: this.updatePhoneNumberFormControl = new FormControl('',\n        [Validators.pattern(PHONE_NUMBER_REGEX)])\n    });\n\n    this.updateFormGroup.enable();\n  }\n\n  changeEditMode() {\n    this.editMode = !this.editMode;\n\n    this.editMode ? this.initUpdateFormGroup() : this.reset();\n  }\n\n  reset() {\n    this.updateFormGroup.reset();\n    this.updateFormGroup.disable();\n    this.updateFormGroup = null;\n  }\n\n  // todo: 31.3.18\n  async save() {\n    if (this.updateFormGroup.dirty) {\n      const user = this.auth.auth.currentUser;\n      // user.updateProfile()\n      // user.updateEmail()\n      // console.log('form = ', this.updateFormGroup);\n\n      const snackBarMsg: string[] = [];\n\n      try {\n        if (this.updateNameFormControl.dirty) {\n          await user.updateProfile({displayName: this.updateNameFormControl.value, photoURL: null});\n          snackBarMsg.push(`your name has been update to ${user.displayName}`);\n        }\n\n        if (this.updateEmailFormControl.dirty) {\n          await user.updateEmail(this.updateEmailFormControl.value);\n          snackBarMsg.push(`your email has been update to ${user.email}`);\n        }\n\n        if (this.updatePhoneNumberFormControl.dirty) {\n          await user.updatePhoneNumber(this.updatePhoneNumberFormControl.value);\n          console.log('phone number = ', this.updatePhoneNumberFormControl.value);\n          snackBarMsg.push(`your phone number has been update to ${user.phoneNumber}`);\n        }\n\n        if (this.config.enableFirestoreSync) {\n          await this._fireStoreService.updateUserData(this.authProcess.parseUserInfo(user));\n        }\n\n      } catch (error) {\n        error.message ? this.snackBar.open(error.message, 'Ok') : this.snackBar.open(error, 'Ok');\n        console.error(error);\n        console.error(error.code);\n        console.error(error.message);\n      }\n\n\n      if (snackBarMsg.length > 0) {\n        this.snackBar.open(snackBarMsg.join('\\\\n'), 'Ok');\n      }\n      // this.updateFormGroup.reset();\n    }\n\n    this.editMode = false;\n  }\n\n  /**\n   * Delete the account of the current firebase user\n   *\n   * On Success, emit the <onAccountDeleted> event and toast a msg!#\n   * Otherwise, log the and toast and error msg!\n   *\n   */\n  async deleteAccount() {\n    try {\n      const user = this.auth.auth.currentUser;\n\n      await this.authProcess.deleteAccount();\n      if (this.config.enableFirestoreSync) {\n        await this._fireStoreService.deleteUserData(user.uid);\n      }\n      this.onAccountDeleted.emit();\n      this.editMode = false;\n      this.snackBar.open('Your account has been successfully deleted!', 'OK', {\n        duration: 5000\n      })\n    } catch (error) {\n      console.log('Error while delete user\\'s account', error);\n      this.snackBar.open('Error occurred while deleting your account!', 'OK', {\n        duration: 5000\n      })\n    }\n  }\n\n}\n","import {Component, Input} from '@angular/core';\nimport {DomSanitizer} from '@angular/platform-browser';\nimport {MatIconRegistry} from '@angular/material';\nimport {AuthProcessService, AuthProvider} from '../../services/auth-process.service';\n\nexport enum Theme {\n  DEFAULT = 'default',\n  CLASSIC = 'classic',\n  STROKED = 'stroked',\n  FAB = 'fab',\n  MINI_FAB = 'mini-fab',\n  RAISED = 'raised',\n}\n\nexport enum Layout {\n  ROW = 'row',\n  COLUMN = 'column'\n}\n\n@Component({\n  selector: 'ngx-auth-firebaseui-providers',\n  template: `\n    <div [ngSwitch]=\"theme\">\n\n      <!--default icon buttons-->\n      <div *ngSwitchDefault\n           [fxLayout]=\"layout\"\n           fxLayout.xs=\"column\"\n           [fxLayoutAlign]=\"layout == 'row' ? 'space-around center' : 'stretch'\">\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Google)\"\n                mat-button\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Google)\">\n          <mat-icon svgIcon=\"google-colored\"></mat-icon>\n          Google\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\"\n                mat-button\n                class=\"facebook-filled\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Facebook)\">\n          <mat-icon svgIcon=\"facebook\"></mat-icon>\n          Facebook\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\"\n                mat-button\n                class=\"twitter-filled\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Twitter)\">\n          <mat-icon svgIcon=\"twitter\"></mat-icon>\n          Twitter\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Github)\"\n                mat-button\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Github)\">\n          <mat-icon svgIcon=\"github\"></mat-icon>\n          GitHub\n        </button>\n      </div>\n\n      <!--classic-->\n      <div *ngSwitchCase=\"themes.CLASSIC\"\n           class=\"buttons-classic\"\n           [fxLayout]=\"layout\"\n           fxLayout.xs=\"column\"\n           [fxLayoutAlign]=\"layout == 'row' ? 'space-around center' : 'stretch'\">\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Google)\"\n                mat-button\n                class=\"google-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Google)\">\n          Google\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\"\n                mat-button\n                class=\"facebook-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Facebook)\">\n          Facebook\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\"\n                mat-button\n                class=\"twitter-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Twitter)\">\n          Twitter\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Github)\"\n                mat-button\n                class=\"github-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Github)\">\n          GitHub\n        </button>\n      </div>\n\n      <!--stroked-->\n      <div *ngSwitchCase=\"themes.STROKED\"\n           class=\"buttons-classic\"\n           [fxLayout]=\"layout\"\n           fxLayout.xs=\"column\"\n           [fxLayoutAlign]=\"layout == 'row' ? 'space-around center' : 'stretch'\">\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Google)\"\n                mat-stroked-button\n                class=\"google-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Google)\">\n          Google\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\"\n                mat-stroked-button\n                class=\"facebook-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Facebook)\">\n          Facebook\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\"\n                mat-stroked-button\n                class=\"twitter-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Twitter)\">\n          Twitter\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Github)\"\n                mat-stroked-button\n                class=\"github-classic\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Github)\">\n          GitHub\n        </button>\n      </div>\n\n      <!--raised-->\n      <div *ngSwitchCase=\"themes.RAISED\"\n           class=\"buttons-raised\"\n           [fxLayout]=\"layout\"\n           fxLayout.xs=\"column\"\n           [fxLayoutAlign]=\"layout == 'row' ? 'space-around center' : 'stretch'\">\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Google)\"\n                mat-raised-button\n                class=\"google-raised\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Google)\">\n          Google\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\"\n                mat-raised-button\n                class=\"facebook-raised\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Facebook)\">\n          Facebook\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\"\n                mat-raised-button\n                class=\"twitter-raised\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Twitter)\">\n          Twitter\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Github)\"\n                mat-raised-button\n                class=\"github-raised\"\n                [ngClass.xs]=\"{'space-full-xs':true}\"\n                (click)=\"authProcess.signInWith(authProvider.Github)\">\n          GitHub\n        </button>\n      </div>\n\n      <!--fab-->\n      <div *ngSwitchCase=\"themes.FAB\"\n           class=\"buttons-raised\"\n           [fxLayout]=\"layout\"\n           [fxLayoutAlign]=\"layout == 'row' ? 'space-around center' : 'stretch'\">\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Google)\"\n                mat-fab\n                class=\"google-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Google)\">\n          <mat-icon svgIcon=\"google\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\"\n                mat-fab\n                class=\"facebook-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Facebook)\">\n          <mat-icon svgIcon=\"facebook\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\"\n                mat-fab\n                class=\"twitter-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Twitter)\">\n          <mat-icon svgIcon=\"twitter\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Github)\"\n                mat-fab\n                class=\"github-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Github)\">\n          <mat-icon svgIcon=\"github\"></mat-icon>\n        </button>\n      </div>\n\n      <!--mini-fab-->\n      <div *ngSwitchCase=\"themes.MINI_FAB\"\n           class=\"buttons-raised\"\n           [fxLayout]=\"layout\"\n           fxLayoutAlign.xs=\"center center\"\n           [fxLayoutAlign]=\"layout == 'row' ? 'space-around center' : 'stretch'\">\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Google)\"\n                mat-mini-fab\n                class=\"google-raised\"\n                fxFlexAlign=\"center\"\n                (click)=\"authProcess.signInWith(authProvider.Google)\">\n          <mat-icon svgIcon=\"google\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\"\n                mat-mini-fab\n                class=\"facebook-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Facebook)\">\n          <mat-icon svgIcon=\"facebook\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\"\n                mat-mini-fab\n                class=\"twitter-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Twitter)\">\n          <mat-icon svgIcon=\"twitter\" class=\"icon-white\"></mat-icon>\n        </button>\n        <button *ngIf=\"providers === authProvider.ALL || providers.includes(authProvider.Github)\"\n                mat-mini-fab\n                class=\"github-raised\"\n                (click)=\"authProcess.signInWith(authProvider.Github)\">\n          <mat-icon svgIcon=\"github\"></mat-icon>\n        </button>\n      </div>\n    </div>\n  `,\n  styles: [`\n    :host{display:block}:host .mat-icon{vertical-align:inherit}.space-full-xs{width:100%;margin:.4rem}.facebook-filled mat-icon{fill:#385899}.twitter-filled mat-icon{fill:#1da1f2}.buttons-raised button{color:#fff!important}.buttons-raised .google-raised{background-color:#db4437}.buttons-raised .facebook-raised{background-color:#385899}.buttons-raised .twitter-raised{background-color:#1da1f2}.buttons-raised .github-raised{background-color:#000}.buttons-classic button.google-classic{color:#db4437!important}.buttons-classic .facebook-classic{color:#385899!important}.buttons-classic .twitter-classic{color:#1da1f2!important}.buttons-classic .github-classic{color:#000!important}.icon-white{color:#fff}.icon-white mat-icon{fill:#fff}\n  `]\n})\nexport class AuthProvidersComponent {\n\n  @Input()\n  theme: string;\n  // theme: string = Theme.DEFAULT;\n\n  @Input()\n  layout: string = Layout.ROW;\n\n  @Input()\n  providers: string[] | string = AuthProvider.ALL; //  google, facebook, twitter, github\n\n  themes = Theme;\n  authProvider = AuthProvider;\n\n  constructor(public authProcess: AuthProcessService,\n              private _iconRegistry: MatIconRegistry,\n              private _sanitizer: DomSanitizer) {\n    _iconRegistry\n      .addSvgIcon('google',\n        _sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/google.svg'))\n      .addSvgIcon('google-colored',\n        _sanitizer.bypassSecurityTrustResourceUrl('/assets/google.svg'))\n      .addSvgIcon('facebook',\n        _sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/facebook.svg'))\n      .addSvgIcon('twitter',\n        _sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/twitter.svg'))\n      .addSvgIcon('github',\n        _sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/github-circle.svg'))\n      .addSvgIcon('phone',\n        _sanitizer.bypassSecurityTrustResourceUrl('/assets/phone.svg'));\n  }\n\n}\n","import {Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'ngx-auth-firebaseui-email-confirmation',\n  template: `\n    <mat-card-content fxLayout=\"column\" fxLayoutAlign=\"center center\">\n      <mat-icon>email</mat-icon>\n      <div class=\"title\">\n        Confirm your e-mail address!\n      </div>\n      <div class=\"subtitle\">\n        <p>A confirmation e-mail has been sent to\n          <b><strong>{{email}}</strong></b>.</p>\n        <p>Check your inbox and click on the link\n                       \"Confirm my e-mail\" to confirm your e-mail address.</p>\n      </div>\n    </mat-card-content>\n\n    <mat-card-actions *ngIf=\"goBackURL\"\n                      fxLayoutAlign=\"center center\">\n      <a mat-button\n         color=\"primary\"\n         [href]=\"goBackURL\">\n        Go back to the sign up page\n      </a>\n    </mat-card-actions>\n  `,\n  styles: [`\n    .material-icons{font-size:4rem}.mat-icon{height:4rem;width:4rem;color:rgba(0,0,0,.54)}.title{font-size:20px;margin-top:16px}.subtitle{margin:16px auto;max-width:300px;color:rgba(0,0,0,.54);font-size:15px;text-align:center}.subtitle p{display:block;-webkit-margin-before:1em;-webkit-margin-after:1em;-webkit-margin-start:0;-webkit-margin-end:0}\n  `]\n})\nexport class EmailConfirmationComponent {\n\n  @Input()\n  email: string;\n\n  @Input()\n  goBackURL: string;\n\n}\n","// import * as firebase from 'firebase';\n// import GoogleAuthProvider = firebase.auth.GoogleAuthProvider;\n// import FacebookAuthProvider = firebase.auth.FacebookAuthProvider;\n// import TwitterAuthProvider = firebase.auth.TwitterAuthProvider;\n// import GithubAuthProvider = firebase.auth.GithubAuthProvider;\nimport AuthProvider = firebase.auth.AuthProvider;\n\nexport interface NgxAuthFirebaseUIConfig {\n  // authNextURL?: string, // popup or redirect\n  // tosUrl?: string, // term of services url\n  // ppUrl?: string, // privacy policy url\n  // authProviders?: Array<AuthProvider>,\n  // languageCode?: string, // todo: 28.3.18\n  enableFirestoreSync?: boolean,\n  onlyEmailPasswordAuth?: boolean,\n  toastMessageOnAuthSuccess?: boolean,\n  toastMessageOnAuthError?: boolean\n}\n\nexport const defaultAuthFirebaseUIConfig: NgxAuthFirebaseUIConfig = {\n  // authMethod: 'redirect',\n  // authProviders: [new GoogleAuthProvider(), new FacebookAuthProvider(), new TwitterAuthProvider(), new GithubAuthProvider()],\n  enableFirestoreSync: true,\n  onlyEmailPasswordAuth: false,\n  toastMessageOnAuthSuccess: true,\n  toastMessageOnAuthError: true\n};\n\n","import {CommonModule} from '@angular/common';\nimport {NgModule, ModuleWithProviders, InjectionToken} from '@angular/core';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {HttpClientModule} from '@angular/common/http';\nimport {AuthComponent} from './components/auth/auth.component';\nimport {UserComponent} from './components/user/user.component';\nimport {AuthProvidersComponent} from './components/providers/auth.providers.component';\nimport {EmailConfirmationComponent} from './components/email-confirmation/email-confirmation.component';\nimport {defaultAuthFirebaseUIConfig, NgxAuthFirebaseUIConfig} from './interfaces/config.interface';\nimport {FirestoreSyncService} from './services/firestore-sync.service';\nimport {AuthProcessService} from './services/auth-process.service';\nimport {FirebaseAppConfig, FirebaseOptionsToken, FirebaseNameOrConfigToken} from '@angular/fire';\nimport {AngularFireAuthModule} from '@angular/fire/auth';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {\n  MatButtonModule,\n  MatCardModule,\n  MatChipsModule,\n  MatDialogModule,\n  MatDividerModule,\n  MatIconModule,\n  MatInputModule,\n  MatSnackBarModule,\n  MatTabsModule,\n  MatTooltipModule,\n  MatProgressSpinnerModule,\n  MatProgressBarModule,\n  MatCheckboxModule\n} from '@angular/material';\nimport {AngularFirestoreModule} from '@angular/fire/firestore';\nimport {MatPasswordStrengthModule} from '@angular-material-extensions/password-strength';\nimport {LegalityDialogComponent} from './components/legality-dialog/legality-dialog.component';\n\n// Export module's public API\n// components\nexport {AuthComponent} from './components/auth/auth.component';\nexport {UserComponent} from './components/user/user.component';\nexport {AuthProvidersComponent, Theme, Layout} from './components/providers/auth.providers.component';\nexport {LegalityDialogComponent} from './components/legality-dialog/legality-dialog.component';\n// services\nexport {AuthProcessService, AuthProvider} from './services/auth-process.service';\nexport {FirestoreSyncService} from './services/firestore-sync.service';\n\n// interfaces\nexport {NgxAuthFirebaseUIConfig} from './interfaces/config.interface';\n\nexport const NgxAuthFirebaseUIConfigToken = new InjectionToken<NgxAuthFirebaseUIConfig>('NgxAuthFirebaseUIConfig');\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    FlexLayoutModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatTabsModule,\n    MatCardModule,\n    MatInputModule,\n    MatButtonModule,\n    MatIconModule,\n    MatSnackBarModule,\n    MatDividerModule,\n    MatChipsModule,\n    MatTooltipModule,\n    MatDialogModule,\n    MatCheckboxModule,\n    MatProgressSpinnerModule,\n    MatProgressBarModule,\n    MatDialogModule,\n    MatPasswordStrengthModule,\n    AngularFireAuthModule,\n    AngularFirestoreModule,\n  ],\n  exports: [\n    AuthComponent,\n    UserComponent,\n    AuthProvidersComponent,\n    EmailConfirmationComponent,\n    AngularFireAuthModule,\n    AngularFirestoreModule\n  ],\n  declarations: [\n    AuthComponent,\n    UserComponent,\n    AuthProvidersComponent,\n    EmailConfirmationComponent,\n    LegalityDialogComponent\n  ],\n  entryComponents: [\n    LegalityDialogComponent\n  ]\n})\n\n\nexport class NgxAuthFirebaseUIModule {\n  static forRoot(configFactory: FirebaseAppConfig,\n                 appNameFactory?: () => string,\n                 config: NgxAuthFirebaseUIConfig = defaultAuthFirebaseUIConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxAuthFirebaseUIModule,\n      providers:\n        [\n          {\n            provide: FirebaseOptionsToken,\n            useValue: configFactory\n          },\n          {\n            provide: FirebaseNameOrConfigToken,\n            useFactory: appNameFactory\n          },\n          {\n            provide: NgxAuthFirebaseUIConfigToken,\n            useValue: config\n          },\n          AuthProcessService,\n          FirestoreSyncService\n        ],\n    };\n  }\n}\n"],"names":["collections","afs","this","FirestoreSyncService","uid","doc","queryFn","collection","getUserDocRefByUID","delete","user","userRef","data","email","displayName","photoURL","phoneNumber","providerId","set","merge","Injectable","AngularFirestore","facebookAuthProvider","firebase.auth","FacebookAuthProvider","googleAuthProvider","GoogleAuthProvider","twitterAuthProvider","TwitterAuthProvider","githubAuthProvider","GithubAuthProvider","ALL","ANONYMOUS","EmailAndPassword","Google","Facebook","Twitter","Github","PhoneNumber","config","afa","_snackBar","_fireStoreService","EventEmitter","AuthProcessService","auth","sendPasswordResetEmail","then","console","log","catch","error","_this","onErrorEmitter","next","provider","password","isLoading","signInResult","AuthProvider","signInAnonymously","_b","signInWithEmailAndPassword","signInWithPopup","Error","handleSuccess","handleError","err_1","name","createUserWithEmailAndPassword","userCredential","_a","enableFirestoreSync","updateProfile","sendEmailVerification","emailConfirmationSent","emailToConfirm","err_2","currentUser","providerData","length","emailVerified","getPhotoPath","Accounts","isAnonymous","image","updateUserData","parseUserInfo","toastMessageOnAuthSuccess","open","messageOnAuthSuccess","duration","onSuccessEmitter","toastMessageOnAuthError","messageOnAuthError","message","Inject","NgxAuthFirebaseUIConfigToken","AngularFireAuth","MatSnackBar","dialogRef","Object","LegalityDialogComponent","tosUrl","privacyPolicyUrl","_disableConfirmActionButton","checkTOS","checkPrivacyPolicy","result","checked","disableConfirmActionButton","authProvider","close","Component","selector","template","styles","MatDialogRef","MAT_DIALOG_DATA","EMAIL_REGEX","RegExp","join","PHONE_NUMBER_REGEX","platformId","authProcess","dialog","onSuccess","onError","AuthComponent","isPlatformBrowser","onErrorSubscription","subscribe","authenticationError","updateAuthSnackbarMessages","_initSignInFormGroupBuilder","_initSignUpFormGroupBuilder","_initResetPasswordFormGroupBuilder","changes","unsubscribe","passwordResetWished","setTimeout","tabIndex","params","afterClosed","_afterSignUpMiddleware","signUpFormGroup","reset","signUp","value","signInWith","resetPassword","resetPasswordEmailFormControl","passReset","signInFormGroup","FormGroup","registerControl","signInEmailFormControl","FormControl","Validators","required","pattern","sigInPasswordFormControl","minLength","maxLength","sigUpNameFormControl","sigUpEmailFormControl","sigUpPasswordFormControl","resetPasswordFormGroup","signUpAnonymously","PLATFORM_ID","MatDialog","Input","Output","snackBar","UserComponent","updateFormGroup","updateNameFormControl","disabled","updateEmailFormControl","updatePhoneNumberFormControl","enable","editMode","initUpdateFormGroup","disable","dirty","snackBarMsg","push","updateEmail","updatePhoneNumber","error_1","code","deleteAccount","deleteUserData","onAccountDeleted","emit","error_2","DEFAULT","CLASSIC","STROKED","FAB","MINI_FAB","RAISED","ROW","COLUMN","_iconRegistry","_sanitizer","Layout","Theme","addSvgIcon","bypassSecurityTrustResourceUrl","MatIconRegistry","DomSanitizer","defaultAuthFirebaseUIConfig","onlyEmailPasswordAuth","InjectionToken","NgxAuthFirebaseUIModule","configFactory","appNameFactory","ngModule","providers","provide","FirebaseOptionsToken","useValue","FirebaseNameOrConfigToken","useFactory","NgModule","imports","CommonModule","HttpClientModule","FlexLayoutModule","FormsModule","ReactiveFormsModule","MatTabsModule","MatCardModule","MatInputModule","MatButtonModule","MatIconModule","MatSnackBarModule","MatDividerModule","MatChipsModule","MatTooltipModule","MatDialogModule","MatCheckboxModule","MatProgressSpinnerModule","MatProgressBarModule","MatPasswordStrengthModule","AngularFireAuthModule","AngularFirestoreModule","exports","AuthProvidersComponent","EmailConfirmationComponent","declarations","entryComponents"],"mappings":"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"}